[tool.ruff]
target-version = "py310"
line-length = 110

[tool.ruff.lint]
select = []
ignore = ["ANN401", "C90", "D100", "D104", "D105", "D107", "D200", "D202", "D207", "D208", "D212", "E501", "EM101", "EM102", "ERA001", "FA", "FBT001", "FBT002", "FIX002", "I001", "PERF203", "PLR09", "PLR2004", "Q000", "S101", "SIM105", "T201", "TD002", "W293"]
extend-select = ["UP", "I", "S", "B", "ALL"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]
"**/tests/**" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]
"**/test_*.py" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]
"**/*_test.py" = ["ANN", "ARG", "ASYNC", "BLE001", "D", "DTZ", "E722", "FBT003", "INP001", "N", "PLC", "PLR2004", "PLW0603", "PLW1641", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF", "TRY003", "TRY301"]

[tool.pytest.ini_options]
pytest_plugins = ["pytest_profiling"]

[tool.poetry]
version = "0.0.0"

[tool.poetry.dependencies]
# Minimal version should also be set in the jsonschema-gentypes.yaml file
python = ">=3.10,<3.14"
numpy = { version = "2.2.6", optional = true }
scikit-image = { version = "0.25.2", optional = true }
opencv-contrib-python-headless = { version = "4.12.0.88", optional = true }
deskew = { version = "1.5.3", optional = true }
"ruamel.yaml" = "0.18.14"
Pillow = "11.3.0"
pypdf = { version = "6.0.0", optional = true }
pyzbar = { version = "0.1.9", optional = true }
reportlab = { version = "4.4.3", optional = true }
weasyprint = { version = "66.0", optional = true }
cffi = { version = "1.17.1", optional = true }
pikepdf = { version = "9.10.2", optional = true }
lxml= { version = "6.0.0", optional = true }
zxing-cpp = { version = "2.3.0", optional = true }
pyperclip = "1.9.0"
deepmerge = "2.0"
matplotlib = { version = "3.10.5", optional = true }
typing-extensions = "4.14.1"
Jinja2 = { version = "3.1.6", optional = true }
natsort = { version = "8.4.0", optional = true }
nbformat = { version = "5.10.4", optional = true }
requests = { version = "2.32.4", optional = true }
python-sane = { version = "2.9.2", optional = true }
asyncinotify = { version = "4.2.1", optional = true }
aiofiles = "24.1.0"
types-aiofiles = "24.1.0.20250516"
polygon-math = "1.3.1"
aiohttp = "3.12.15"
sentry-sdk = "2.34.1"
typer-slim = "0.16.0"
shellingham = "1.5.4" # Used by typer to detect the shell

[tool.poetry.extras]
process = [
    "numpy",
    "scikit-image",
    "opencv-contrib-python-headless",
    "deskew",
    "pypdf",
    "pyzbar",
    "reportlab",
    "weasyprint",
    "cffi",
    "pikepdf",
    "zxing-cpp",
    "matplotlib",
    "Jinja2",
    "natsort",
    "nbformat",
    "requests",
    "asyncinotify"
]
jupyter = [
    "opencv-contrib-python-headless",
    "deskew",
    "matplotlib",
]
sane = ["python-sane"]

[tool.poetry.group.dev.dependencies]
prospector = { version = "1.17.3", extras = ["with_bandit", "with_mypy", "with_pyroma", "with_ruff"] }
prospector-profile-duplicated = "1.10.5"
prospector-profile-utils = "1.26.5"
pytest = "8.4.1"
pytest-profiling = "1.8.1"
pytest-rerunfailures = "15.1"
pytest-asyncio = "1.1.0"
pyroma = "5.0"
typing-extensions = "4.14.1"
c2cwsgiutils = { version = "6.1.7", extras = ["test_images"] }
types-requests = "2.32.0.20250515"
nbconvert = "7.16.6"
ipykernel = "6.30.1"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "default_branch" -%}
{{serialize_pep440(bump_version(base, 1), dev=distance)}}
{%- elif env.get("VERSION_TYPE") == "stabilization_branch" -%}
{{serialize_pep440(bump_version(base, 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"

[project]
dynamic = ["dependencies", "version"]
name = "scan-to-paperless"
description = "Tool to scan and process documents to Paperless"
readme = "README.md"
keywords = ["scan", "paperless"]
license = "BSD-2-Clause"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    'License :: OSI Approved :: BSD License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Typing :: Typed',
]
authors = [{name = "StÃ©phane Brunner",email = "stephane.brunner@gmail.com"}]
requires-python = ">=3.10"
dependencies = ["ruamel.yaml", "argcomplete", "Pillow", "lxml", "pyperclip", "deepmerge", "typing-extensions", "aiofiles", "types-aiofiles", "polygon-math", "aiohttp", "sentry-sdk", "typer-slim", "shellingham"]

[project.urls]
homepage = "https://hub.docker.com/r/sbrunner/scan-to-paperless/"
repository = "https://github.com/sbrunner/scan-to-paperless"
"Bug Tracker" = "https://github.com/sbrunner/scan-to-paperless/issues"

[project.scripts]
scan = "scan_to_paperless.scan:app_scan"
scan-to-paperless = "scan_to_paperless.scan:app"
scan-sane = "scan_to_paperless.scan_sane:_main"
scan-process-status = "scan_to_paperless.scan_process_status:main"
scan-process = "scan_to_paperless.process:main"
add-codes-page = "scan_to_paperless.add_code:main"

[project.optional-dependencies]
process = ["numpy", "scikit-image", "opencv-contrib-python-headless", "deskew", "pypdf", "pyzbar", "reportlab", "weasyprint", "cffi", "pikepdf", "zxing-cpp", "matplotlib", "Jinja2", "natsort", "nbformat", "requests", "asyncinotify"]
jupyter = ["opencv-contrib-python-headless", "deskew", "matplotlib"]
sane = ["python-sane"]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"
