[tool.ruff]
target-version = "py310"
line-length = 110

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
pytest_plugins = ["pytest_profiling"]

[tool.poetry]
version = "0.0.0"

[tool.poetry.dependencies]
# Minimal version should also be set in the jsonschema-gentypes.yaml file
python = ">=3.10,<3.14"
numpy = { version = "2.2.5", optional = true }
scikit-image = { version = "0.25.2", optional = true }
opencv-contrib-python-headless = { version = "4.11.0.86", optional = true }
deskew = { version = "1.5.1", optional = true }
"ruamel.yaml" = "0.18.10"
argcomplete = "3.6.2"
Pillow = "11.2.1"
pypdf = { version = "5.5.0", optional = true }
pyzbar = { version = "0.1.9", optional = true }
reportlab = { version = "4.4.0", optional = true }
weasyprint = { version = "65.1", optional = true }
cffi = { version = "1.17.1", optional = true }
pikepdf = { version = "9.7.0", optional = true }
lxml= { version = "5.4.0", optional = true }
zxing-cpp = { version = "2.3.0", optional = true }
pyperclip = "1.9.0"
deepmerge = "2.0"
matplotlib = { version = "3.10.3", optional = true }
typing-extensions = "4.13.2"
Jinja2 = { version = "3.1.6", optional = true }
natsort = { version = "8.4.0", optional = true }
nbformat = { version = "5.10.4", optional = true }
requests = { version = "2.32.3", optional = true }
python-sane = { version = "2.9.1", optional = true }
asyncinotify = { version = "4.2.1", optional = true }
aiofiles = "24.1.0"
types-aiofiles = "24.1.0.20250326"
polygon-math = "1.3.1"
aiohttp = "3.11.18"
sentry-sdk = "2.28.0"

[tool.poetry.extras]
process = [
    "numpy",
    "scikit-image",
    "opencv-contrib-python-headless",
    "deskew",
    "pypdf",
    "pyzbar",
    "reportlab",
    "weasyprint",
    "cffi",
    "pikepdf",
    "zxing-cpp",
    "matplotlib",
    "Jinja2",
    "natsort",
    "nbformat",
    "requests",
    "asyncinotify"
]
jupyter = [
    "opencv-contrib-python-headless",
    "deskew",
    "matplotlib",
]
sane = ["python-sane"]

[tool.poetry.group.dev.dependencies]
prospector = { version = "1.16.1", extras = ["with_bandit", "with_mypy", "with_pyroma", "with_ruff"] }
prospector-profile-duplicated = "1.10.5"
prospector-profile-utils = "1.22.3"
pytest = "8.3.5"
pytest-profiling = "1.8.1"
pytest-rerunfailures = "15.1"
pyroma = "4.2"
typing-extensions = "4.13.2"
c2cwsgiutils = { version = "6.1.7", extras = ["test_images"] }
types-requests = "2.32.0.20250328"
nbconvert = "7.16.6"
ipykernel = "6.29.5"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "default_branch" -%}
{{serialize_pep440(bump_version(base, 1), dev=distance)}}
{%- elif env.get("VERSION_TYPE") == "stabilization_branch" -%}
{{serialize_pep440(bump_version(base, 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"

[project]
dynamic = ["dependencies", "version"]
name = "scan-to-paperless"
description = "Tool to scan and process documents to Paperless"
readme = "README.md"
keywords = ["scan", "paperless"]
license = "BSD-2-Clause"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    'License :: OSI Approved :: BSD License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Typing :: Typed',
]
authors = [{name = "StÃ©phane Brunner",email = "stephane.brunner@gmail.com"}]

[project.urls]
homepage = "https://hub.docker.com/r/sbrunner/scan-to-paperless/"
repository = "https://github.com/sbrunner/scan-to-paperless"
"Bug Tracker" = "https://github.com/sbrunner/scan-to-paperless/issues"

[project.scripts]
scan = "scan_to_paperless.scan:main"
scan-sane = "scan_to_paperless.scan_sane:_main"
scan-process-status = "scan_to_paperless.scan_process_status:main"
scan-process = "scan_to_paperless.process:main"
add-codes-page = "scan_to_paperless.add_code:main"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning", "poetry-plugin-tweak-dependencies-version"]
build-backend = "poetry.core.masonry.api"
