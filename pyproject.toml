[tool.black]
line-length = 110
target-version = ["py39"]

[tool.isort]
profile = "black"
line_length = 110

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict = true
plugins = ["numpy.typing.mypy_plugin"]

[tool.pytest.ini_options]
pytest_plugins = ["pytest_profiling"]

[tool.poetry]
name = "scan-to-paperless"
version = "0.0.0"
description = "Tool to scan and process documents to Paperless"
readme = "README.md"
keywords = ["scan", "paperless"]
license = "BSD-2-Clause"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Typing :: Typed",
]
authors = ["St√©phane Brunner <stephane.brunner@gmail.com>"]
homepage = "https://hub.docker.com/r/sbrunner/scan-to-paperless/"
repository = "https://github.com/sbrunner/scan-to-paperless"

[tool.poetry.scripts]
scan = "scan_to_paperless.scan:main"
scan-sane = "scan_to_paperless.scan_sane:_main"
scan-process-status = "scan_to_paperless.scan_process_status:main"
scan-process = "scan_to_paperless.process:main"
add-codes-page = "scan_to_paperless.code:main"

[tool.poetry.dependencies]
# Minimal version should also be set in the jsonschema-gentypes.yaml file
python = ">=3.10,<3.12"
numpy = { version = "2.1.2", optional = true }
scikit-image = { version = "0.24.0", optional = true }
opencv-contrib-python-headless = { version = "4.10.0.84", optional = true }
deskew = { version = "1.5.1", optional = true }
"ruamel.yaml" = "0.18.6"
argcomplete = "3.5.1"
Pillow = "10.4.0"
PyPDF2 = { version = "3.0.1", optional = true }
pyzbar = { version = "0.1.9", optional = true }
reportlab = { version = "4.2.5", optional = true }
weasyprint = { version = "62.3", optional = true }
cffi = { version = "1.17.1", optional = true }
pikepdf = { version = "9.4.0", optional = true }
lxml= { version = "5.3.0", optional = true }
zxing-cpp = { version = "2.2.0", optional = true }
pyperclip = "1.9.0"
deepmerge = "2.0"
matplotlib = { version = "3.9.2", optional = true }
typing-extensions = "4.12.2"
Jinja2 = { version = "3.1.4", optional = true }
natsort = { version = "8.4.0", optional = true }
nbformat = { version = "5.10.4", optional = true }
requests = { version = "2.32.3", optional = true }
python-sane = { version = "2.9.1", optional = true }

[tool.poetry.extras]
process = [
    "numpy",
    "scikit-image",
    "opencv-contrib-python-headless",
    "deskew",
    "PyPDF2",
    "pyzbar",
    "reportlab",
    "weasyprint",
    "cffi",
    "pikepdf",
    "zxing-cpp",
    "matplotlib",
    "Jinja2",
    "natsort",
    "nbformat",
    "requests"
]
jupyter = [
    "opencv-contrib-python-headless",
    "deskew",
    "matplotlib",
]
sane = ["python-sane"]

[tool.poetry.group.dev.dependencies]
prospector = { version = "1.12.1", extras = ["with_bandit", "with_mypy", "with_pyroma"] }
prospector-profile-duplicated = "1.6.0"
prospector-profile-utils = "1.9.1"
pytest = "8.3.3"
pytest-profiling = "1.7.0"
pytest-rerunfailures = "14.0"
pyroma = "4.2"
typing-extensions = "4.12.2"
c2cwsgiutils = { version = "6.1.2", extras = ["test_images"] }
types-requests = "2.32.0.20241016"
nbconvert = "7.16.4"
ipykernel = "6.29.5"


[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning", "poetry-plugin-tweak-dependencies-version", "poetry-plugin-drop-python-upper-constraint"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "version_branch" -%}
{{serialize_pep440(bump_version(base, 1 if env.get("IS_MASTER") == "TRUE" else 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "present"
