name: Rebuild

on:
  schedule:
  - cron: 30 2 * * *

jobs:
  rebuild:
    runs-on: ubuntu-20.04
    name: Rebuild
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        branch:
        - test
        - master

    steps:
    - run: docker system prune --all --force
    - uses: actions/checkout@v3
      with:
        ref: ${{ matrix.branch }}
        fetch-depth: 0

    - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
    - run: python3 -m pip install --user --requirement=ci/requirements.txt

    - name: Checks
      run: c2cciutils-checks

        # the if the generated files are up to date
    - run: make jsonschema
    - run: git diff --quiet
    - run: git diff
      if: failure()

    - run: make build
    - run: make build-tests
    - name: Init Docker volumes
      run: |
        docker run --rm --detach --name volumes --volume=tests:/tests --volume=results:/results alpine tail -f /dev/null
        docker cp tests/ volumes:/tests/
    - name: pytest
      run: >
        docker run --rm --env=PYTHONPATH=/opt/
        --volume=results:/results --volume=tests:/tests
        sbrunner/scan-to-paperless-tests bash -c '
        cd /tests &&
        pytest --durations=0 --verbose --color=yes
        --profile --profile-svg --junitxml=/results/test-reports/junit.xml .'
    - name: Extract data from Docker volumes
      run: |
        docker cp volumes:/results/ ./
        mkdir -p results/
        docker cp volumes:/tests/prof/ results/
    - uses: actions/upload-artifact@v3
      with:
        name: results
        path: results
        if-no-files-found: ignore
        retention-days: 5
      if: failure()
    - uses: actions/upload-artifact@v3
      with:
        name: Test report
        path: results/test-reports
        if-no-files-found: ignore
        retention-days: 5
      if: failure()

    - run: make build-all
    - run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

    - name: Init pypi
      run: |
        echo "[pypi]" > ~/.pypirc
        echo "username = ${{ secrets.PYPI_USERNAME }}" >> ~/.pypirc
        echo "password = ${{ secrets.PYPI_PASSWORD }}" >> ~/.pypirc
        pip install --user wheel twine

    - name: Publish
      run: c2cciutils-publish --group=docker --type=rebuild --branch=${{ matrix.branch }}
